{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Francisco Javier\\\\Documents\\\\Proyectos\\\\drumMachine\\\\drumMachine\\\\src\\\\components\\\\PlaylistSelector.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport changePlayList from '../redux/actions/changePlayList';\n\nclass PlaylistSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clickPlayList = this.clickPlayList.bind(this);\n  }\n\n  clickPlayList(event) {\n    this.props.changePlayList(event.currentTarget.innerHTML);\n  }\n\n  render() {\n    const _this$props = this.props,\n          onoff = _this$props.onoff,\n          playList = _this$props.playList,\n          playListProp = _this$props.playListProp;\n    let classN;\n\n    if (onoff && playList === playListProp) {\n      classN = 'butPlayList plListActive';\n    } else if (onoff && playList !== playListProp) {\n      classN = 'butPlayList plListDisabled';\n    } else {\n      classN = 'butPlayList';\n    }\n\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: classN,\n      onClick: this.clickPlayList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, playList);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onoff: state.onoff,\n    playListProp: state.playList\n  };\n}\n\nconst mapDispatchToProps = {\n  changePlayList\n};\nPlaylistSelector.propTypes = {\n  changePlayList: PropTypes.func.isRequired,\n  onoff: PropTypes.bool.isRequired,\n  playList: PropTypes.string.isRequired,\n  playListProp: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistSelector);","map":{"version":3,"sources":["C:/Users/Francisco Javier/Documents/Proyectos/drumMachine/drumMachine/src/components/PlaylistSelector.jsx"],"names":["React","connect","PropTypes","changePlayList","PlaylistSelector","Component","constructor","props","clickPlayList","bind","event","currentTarget","innerHTML","render","onoff","playList","playListProp","classN","mapStateToProps","state","mapDispatchToProps","propTypes","func","isRequired","bool","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,gBAAN,SAA+BJ,KAAK,CAACK,SAArC,CAA+C;AAC7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDD,EAAAA,aAAa,CAACE,KAAD,EAAQ;AACnB,SAAKH,KAAL,CAAWJ,cAAX,CAA0BO,KAAK,CAACC,aAAN,CAAoBC,SAA9C;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACmC,KAAKN,KADxC;AAAA,UACCO,KADD,eACCA,KADD;AAAA,UACQC,QADR,eACQA,QADR;AAAA,UACkBC,YADlB,eACkBA,YADlB;AAEP,QAAIC,MAAJ;;AACA,QAAIH,KAAK,IAAIC,QAAQ,KAAKC,YAA1B,EAAwC;AACtCC,MAAAA,MAAM,GAAG,0BAAT;AACD,KAFD,MAEO,IAAIH,KAAK,IAAIC,QAAQ,KAAKC,YAA1B,EAAwC;AAC7CC,MAAAA,MAAM,GAAG,4BAAT;AACD,KAFM,MAEA;AACLA,MAAAA,MAAM,GAAG,aAAT;AACD;;AACD,WACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAEA,MAFb;AAGE,MAAA,OAAO,EAAE,KAAKT,aAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGO,QALH,CADF;AASD;;AA7B4C;;AAgC/C,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLL,IAAAA,KAAK,EAAEK,KAAK,CAACL,KADR;AAELE,IAAAA,YAAY,EAAEG,KAAK,CAACJ;AAFf,GAAP;AAID;;AAED,MAAMK,kBAAkB,GAAG;AACzBjB,EAAAA;AADyB,CAA3B;AAIAC,gBAAgB,CAACiB,SAAjB,GAA6B;AAC3BlB,EAAAA,cAAc,EAAED,SAAS,CAACoB,IAAV,CAAeC,UADJ;AAE3BT,EAAAA,KAAK,EAAEZ,SAAS,CAACsB,IAAV,CAAeD,UAFK;AAG3BR,EAAAA,QAAQ,EAAEb,SAAS,CAACuB,MAAV,CAAiBF,UAHA;AAI3BP,EAAAA,YAAY,EAAEd,SAAS,CAACuB,MAAV,CAAiBF;AAJJ,CAA7B;AAOA,eAAetB,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,gBAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport changePlayList from '../redux/actions/changePlayList';\r\n\r\nclass PlaylistSelector extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clickPlayList = this.clickPlayList.bind(this);\r\n  }\r\n\r\n  clickPlayList(event) {\r\n    this.props.changePlayList(event.currentTarget.innerHTML);\r\n  }\r\n\r\n  render() {\r\n    const { onoff, playList, playListProp } = this.props;\r\n    let classN;\r\n    if (onoff && playList === playListProp) {\r\n      classN = 'butPlayList plListActive';\r\n    } else if (onoff && playList !== playListProp) {\r\n      classN = 'butPlayList plListDisabled';\r\n    } else {\r\n      classN = 'butPlayList';\r\n    }\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={classN}\r\n        onClick={this.clickPlayList}\r\n      >\r\n        {playList}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    onoff: state.onoff,\r\n    playListProp: state.playList,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changePlayList,\r\n};\r\n\r\nPlaylistSelector.propTypes = {\r\n  changePlayList: PropTypes.func.isRequired,\r\n  onoff: PropTypes.bool.isRequired,\r\n  playList: PropTypes.string.isRequired,\r\n  playListProp: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistSelector);\r\n"]},"metadata":{},"sourceType":"module"}